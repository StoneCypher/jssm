'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// this is explicitly about other peoples' data, so it has to be weakly typed
var weighted_rand_select = function weighted_rand_select(options) {
  var probability_property = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'probability';


  if (!Array.isArray(options)) {
    throw new TypeError('options must be a non-empty array of objects');
  }

  if (!(_typeof(options[0]) === 'object')) {
    throw new TypeError('options must be a non-empty array of objects');
  }

  var frand = function frand(cap) {
    return Math.random() * cap;
  },
      or_one = function or_one(item) {
    return item === undefined ? 1 : item;
  },
      prob_sum = options.reduce(function (acc, val) {
    return acc + or_one(val[probability_property]);
  }, 0),
      rnd = frand(prob_sum);

  var cursor = 0,
      cursor_sum = 0;

  while ((cursor_sum += or_one(options[cursor++][probability_property])) <= rnd) {} // eslint-disable-line no-empty,fp/no-loops
  return options[cursor - 1];
};
/* eslint-enable flowtype/no-weak-types */

var seq = function seq(n) {
  return new Array(n).fill(true).map(function (_, i) {
    return i;
  });
};

var histograph = function histograph(a // eslint-disable-line flowtype/no-weak-types

) {
  return a.sort().reduce(function (m, v) {
    return m.set(v, m.has(v) ? m.get(v) + 1 : 1), m;
  }, new Map());
}; // eslint-disable-line flowtype/no-weak-types,no-sequences


var weighted_sample_select = function weighted_sample_select(n, options, probability_property // eslint-disable-line flowtype/no-weak-types

) {
  return seq(n).map(function (_i) {
    return weighted_rand_select(options, probability_property);
  });
}; // eslint-disable-line flowtype/no-weak-types


var weighted_histo_key = function weighted_histo_key(n, opts, prob_prop, extract // eslint-disable-line flowtype/no-weak-types

) {
  return histograph(weighted_sample_select(n, opts, prob_prop).map(function (s) {
    return s[extract];
  }));
}; // eslint-disable-line flowtype/no-weak-types


exports.seq = seq;
exports.histograph = histograph;
exports.weighted_histo_key = weighted_histo_key;
exports.weighted_rand_select = weighted_rand_select;
exports.weighted_sample_select = weighted_sample_select;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9qcy9qc3NtLXV0aWwuanMiXSwibmFtZXMiOlsid2VpZ2h0ZWRfcmFuZF9zZWxlY3QiLCJvcHRpb25zIiwicHJvYmFiaWxpdHlfcHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJmcmFuZCIsImNhcCIsIk1hdGgiLCJyYW5kb20iLCJvcl9vbmUiLCJpdGVtIiwidW5kZWZpbmVkIiwicHJvYl9zdW0iLCJyZWR1Y2UiLCJhY2MiLCJ2YWwiLCJybmQiLCJjdXJzb3IiLCJjdXJzb3Jfc3VtIiwic2VxIiwibiIsImZpbGwiLCJtYXAiLCJfIiwiaSIsImhpc3RvZ3JhcGgiLCJhIiwic29ydCIsIm0iLCJ2Iiwic2V0IiwiaGFzIiwiZ2V0IiwiTWFwIiwid2VpZ2h0ZWRfc2FtcGxlX3NlbGVjdCIsIl9pIiwid2VpZ2h0ZWRfaGlzdG9fa2V5Iiwib3B0cyIsInByb2JfcHJvcCIsImV4dHJhY3QiLCJzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQU9BO0FBRUEsSUFBTUEsdUJBQWlDLFNBQWpDQSxvQkFBaUMsQ0FBQ0MsT0FBRCxFQUE0RTtBQUFBLE1BQXREQyxvQkFBc0QsdUVBQXZCLGFBQXVCOzs7QUFFakgsTUFBSSxDQUFDQyxNQUFNQyxPQUFOLENBQWNILE9BQWQsQ0FBTCxFQUE2QjtBQUMzQixVQUFNLElBQUlJLFNBQUosQ0FBYyw4Q0FBZCxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxFQUFFLFFBQU9KLFFBQVEsQ0FBUixDQUFQLE1BQXNCLFFBQXhCLENBQUosRUFBdUM7QUFDckMsVUFBTSxJQUFJSSxTQUFKLENBQWMsOENBQWQsQ0FBTjtBQUNEOztBQUVELE1BQU1DLFFBQXdCLFNBQXhCQSxLQUF3QixDQUFDQyxHQUFEO0FBQUEsV0FBaUJDLEtBQUtDLE1BQUwsS0FBZ0JGLEdBQWpDO0FBQUEsR0FBOUI7QUFBQSxNQUNNRyxTQUF3QixTQUF4QkEsTUFBd0IsQ0FBQ0MsSUFBRDtBQUFBLFdBQWlCQSxTQUFTQyxTQUFULEdBQW9CLENBQXBCLEdBQXdCRCxJQUF6QztBQUFBLEdBRDlCO0FBQUEsTUFFTUUsV0FBd0JaLFFBQVFhLE1BQVIsQ0FBZ0IsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOO0FBQUEsV0FBMEJELE1BQU1MLE9BQU9NLElBQUlkLG9CQUFKLENBQVAsQ0FBaEM7QUFBQSxHQUFoQixFQUFtRixDQUFuRixDQUY5QjtBQUFBLE1BR01lLE1BQXdCWCxNQUFNTyxRQUFOLENBSDlCOztBQUtBLE1BQU1LLFNBQXdCLENBQTlCO0FBQUEsTUFDTUMsYUFBd0IsQ0FEOUI7O0FBR0EsU0FBTyxDQUFDQSxjQUFjVCxPQUFRVCxPQUFELENBQWNpQixRQUFkLEVBQXdCaEIsb0JBQXhCLENBQVAsQ0FBZixLQUF5RWUsR0FBaEYsRUFBcUYsQ0FBRyxDQWxCeUIsQ0FrQnhCO0FBQ3pGLFNBQU9oQixRQUFRaUIsU0FBTyxDQUFmLENBQVA7QUFFRCxDQXJCRDtBQXNCQTs7QUFNQSxJQUFNRSxNQUFnQixTQUFoQkEsR0FBZ0IsQ0FBQ0MsQ0FBRDtBQUFBLFNBRWpCLElBQUlsQixLQUFKLENBQVVrQixDQUFWLENBQUQsQ0FBZUMsSUFBZixDQUFvQixJQUFwQixFQUNlQyxHQURmLENBQ29CLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQWtCQSxDQUFsQjtBQUFBLEdBRHBCLENBRmtCO0FBQUEsQ0FBdEI7O0FBU0EsSUFBTUMsYUFBdUIsU0FBdkJBLFVBQXVCLENBQUNDLENBQUQsQ0FBc0M7O0FBQXRDO0FBQUEsU0FFekJBLEVBQUVDLElBQUYsR0FBU2QsTUFBVCxDQUFpQixVQUFDZSxDQUFELEVBQUdDLENBQUg7QUFBQSxXQUEwQkQsRUFBRUUsR0FBRixDQUFNRCxDQUFOLEVBQVVELEVBQUVHLEdBQUYsQ0FBTUYsQ0FBTixJQUFVRCxFQUFFSSxHQUFGLENBQU1ILENBQU4sSUFBUyxDQUFuQixHQUF1QixDQUFqQyxHQUF1Q0QsQ0FBakU7QUFBQSxHQUFqQixFQUFzRixJQUFJSyxHQUFKLEVBQXRGLENBRnlCO0FBQUEsQ0FBN0IsQyxDQUV3Rzs7O0FBTXhHLElBQU1DLHlCQUFtQyxTQUFuQ0Esc0JBQW1DLENBQUNkLENBQUQsRUFBWXBCLE9BQVosRUFBbUNDLG9CQUFuQyxDQUFnRjs7QUFBaEY7QUFBQSxTQUVyQ2tCLElBQUlDLENBQUosRUFBT0UsR0FBUCxDQUFZLFVBQUNhLEVBQUQ7QUFBQSxXQUFhcEMscUJBQXFCQyxPQUFyQixFQUE4QkMsb0JBQTlCLENBQWI7QUFBQSxHQUFaLENBRnFDO0FBQUEsQ0FBekMsQyxDQUVtRjs7O0FBTW5GLElBQU1tQyxxQkFBK0IsU0FBL0JBLGtCQUErQixDQUFDaEIsQ0FBRCxFQUFZaUIsSUFBWixFQUFnQ0MsU0FBaEMsRUFBbURDLE9BQW5ELENBQW1GOztBQUFuRjtBQUFBLFNBRWpDZCxXQUFXUyx1QkFBdUJkLENBQXZCLEVBQTBCaUIsSUFBMUIsRUFBZ0NDLFNBQWhDLEVBQTJDaEIsR0FBM0MsQ0FBZ0QsVUFBQ2tCLENBQUQ7QUFBQSxXQUFZQSxFQUFFRCxPQUFGLENBQVo7QUFBQSxHQUFoRCxDQUFYLENBRmlDO0FBQUEsQ0FBckMsQyxDQUV5Rjs7O1FBTWhGcEIsRyxHQUFBQSxHO1FBQUtNLFUsR0FBQUEsVTtRQUFZVyxrQixHQUFBQSxrQjtRQUFvQnJDLG9CLEdBQUFBLG9CO1FBQXNCbUMsc0IsR0FBQUEsc0IiLCJmaWxlIjoianNzbS11dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIEBmbG93XHJcblxyXG5cclxuXHJcblxyXG5cclxuLy8gdGhpcyBpcyBleHBsaWNpdGx5IGFib3V0IG90aGVyIHBlb3BsZXMnIGRhdGEsIHNvIGl0IGhhcyB0byBiZSB3ZWFrbHkgdHlwZWRcclxuLyogZXNsaW50LWRpc2FibGUgZmxvd3R5cGUvbm8td2Vhay10eXBlcyAqL1xyXG5jb25zdCB3ZWlnaHRlZF9yYW5kX3NlbGVjdDogRnVuY3Rpb24gPSAob3B0aW9uczogQXJyYXk8YW55PiwgcHJvYmFiaWxpdHlfcHJvcGVydHk6IHN0cmluZyA9ICdwcm9iYWJpbGl0eScpOiBhbnkgPT4ge1xyXG5cclxuICBpZiAoIUFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhIG5vbi1lbXB0eSBhcnJheSBvZiBvYmplY3RzJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoISh0eXBlb2Ygb3B0aW9uc1swXSA9PT0gJ29iamVjdCcpKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYSBub24tZW1wdHkgYXJyYXkgb2Ygb2JqZWN0cycpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZnJhbmQgICAgICA6IEZ1bmN0aW9uID0gKGNhcCk6IG51bWJlciA9PiBNYXRoLnJhbmRvbSgpICogY2FwLFxyXG4gICAgICAgIG9yX29uZSAgICAgOiBGdW5jdGlvbiA9IChpdGVtKTogYW55ICAgPT4gaXRlbSA9PT0gdW5kZWZpbmVkPyAxIDogaXRlbSxcclxuICAgICAgICBwcm9iX3N1bSAgIDogbnVtYmVyICAgPSBvcHRpb25zLnJlZHVjZSggKGFjYywgdmFsOmFueSk6IG51bWJlciA9PiBhY2MgKyBvcl9vbmUodmFsW3Byb2JhYmlsaXR5X3Byb3BlcnR5XSksIDAgKSxcclxuICAgICAgICBybmQgICAgICAgIDogbnVtYmVyICAgPSBmcmFuZChwcm9iX3N1bSk7XHJcblxyXG4gIGxldCAgIGN1cnNvciAgICAgOiBudW1iZXIgICA9IDAsXHJcbiAgICAgICAgY3Vyc29yX3N1bSA6IG51bWJlciAgID0gMDtcclxuXHJcbiAgd2hpbGUgKChjdXJzb3Jfc3VtICs9IG9yX29uZSgob3B0aW9uczphbnkpW2N1cnNvcisrXVtwcm9iYWJpbGl0eV9wcm9wZXJ0eV0pKSA8PSBybmQpIHsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LGZwL25vLWxvb3BzXHJcbiAgcmV0dXJuIG9wdGlvbnNbY3Vyc29yLTFdO1xyXG5cclxufTtcclxuLyogZXNsaW50LWVuYWJsZSBmbG93dHlwZS9uby13ZWFrLXR5cGVzICovXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3Qgc2VxOiBGdW5jdGlvbiA9IChuOiBudW1iZXIpOiBBcnJheTxudW1iZXI+ID0+XHJcblxyXG4gICAgKG5ldyBBcnJheShuKSkuZmlsbCh0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKCAoXywgaSk6IG51bWJlciA9PiBpICk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgaGlzdG9ncmFwaDogRnVuY3Rpb24gPSAoYSA6IEFycmF5PGFueT4pOiBNYXA8YW55LCBudW1iZXI+ID0+IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmxvd3R5cGUvbm8td2Vhay10eXBlc1xyXG5cclxuICAgIGEuc29ydCgpLnJlZHVjZSggKG0sdik6IE1hcDxhbnksIGFueT4gPT4gKCBtLnNldCh2LCAobS5oYXModik/IG0uZ2V0KHYpKzEgOiAxKSkgLCBtKSwgbmV3IE1hcCgpICk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZsb3d0eXBlL25vLXdlYWstdHlwZXMsbm8tc2VxdWVuY2VzXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3Qgd2VpZ2h0ZWRfc2FtcGxlX3NlbGVjdDogRnVuY3Rpb24gPSAobjogbnVtYmVyLCBvcHRpb25zOiBBcnJheTxtaXhlZD4sIHByb2JhYmlsaXR5X3Byb3BlcnR5OiBzdHJpbmcpOiBBcnJheTxhbnk+ID0+IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZmxvd3R5cGUvbm8td2Vhay10eXBlc1xyXG5cclxuICAgIHNlcShuKS5tYXAoIChfaSk6IGFueSA9PiB3ZWlnaHRlZF9yYW5kX3NlbGVjdChvcHRpb25zLCBwcm9iYWJpbGl0eV9wcm9wZXJ0eSkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZsb3d0eXBlL25vLXdlYWstdHlwZXNcclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCB3ZWlnaHRlZF9oaXN0b19rZXk6IEZ1bmN0aW9uID0gKG46IG51bWJlciwgb3B0czogQXJyYXk8bWl4ZWQ+LCBwcm9iX3Byb3A6IHN0cmluZywgZXh0cmFjdDogc3RyaW5nKTogQXJyYXk8YW55PiA9PiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZsb3d0eXBlL25vLXdlYWstdHlwZXNcclxuXHJcbiAgICBoaXN0b2dyYXBoKHdlaWdodGVkX3NhbXBsZV9zZWxlY3Qobiwgb3B0cywgcHJvYl9wcm9wKS5tYXAoIChzKTogYW55ID0+IHNbZXh0cmFjdF0pKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmbG93dHlwZS9uby13ZWFrLXR5cGVzXHJcblxyXG5cclxuXHJcblxyXG5cclxuZXhwb3J0IHsgc2VxLCBoaXN0b2dyYXBoLCB3ZWlnaHRlZF9oaXN0b19rZXksIHdlaWdodGVkX3JhbmRfc2VsZWN0LCB3ZWlnaHRlZF9zYW1wbGVfc2VsZWN0IH07XHJcbiJdfQ==